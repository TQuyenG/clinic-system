import React, { useState, useRef, useEffect } from 'react';
import { 
  FaComments, 
  FaTimes, 
  FaPaperPlane, 
  FaRobot,
  FaUser
} from 'react-icons/fa';
import './Chatbot.css';

const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Clinic System. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
      sender: 'bot',
      time: new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  // Auto scroll to bottom khi c√≥ tin nh·∫Øn m·ªõi
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSendMessage = (e) => {
    e.preventDefault();
    
    if (inputMessage.trim() === '') return;

    // Th√™m tin nh·∫Øn c·ªßa user
    const userMessage = {
      id: messages.length + 1,
      text: inputMessage,
      sender: 'user',
      time: new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Gi·∫£ l·∫≠p ph·∫£n h·ªìi t·ª´ bot
    setTimeout(() => {
      const botResponse = getBotResponse(inputMessage);
      const botMessage = {
        id: messages.length + 2,
        text: botResponse,
        sender: 'bot',
        time: new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
      };
      
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1000);
  };

  // Logic ph·∫£n h·ªìi ƒë∆°n gi·∫£n c·ªßa bot
  const getBotResponse = (message) => {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('ƒë·∫∑t l·ªãch') || lowerMessage.includes('kh√°m')) {
      return 'B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch kh√°m t·∫°i trang "ƒê·∫∑t l·ªãch" ho·∫∑c g·ªçi hotline 1900 1234. B·∫°n c·∫ßn ƒë·∫∑t l·ªãch cho chuy√™n khoa n√†o?';
    } else if (lowerMessage.includes('gi·ªù') || lowerMessage.includes('m·ªü c·ª≠a')) {
      return 'Ch√∫ng t√¥i l√†m vi·ªác t·ª´ Th·ª© 2 - Th·ª© 7: 7:00 - 20:00 v√† Ch·ªß nh·∫≠t: 8:00 - 17:00. B·∫°n c·∫ßn th√™m th√¥ng tin g√¨ kh√¥ng?';
    } else if (lowerMessage.includes('ƒë·ªãa ch·ªâ') || lowerMessage.includes('·ªü ƒë√¢u')) {
      return 'Clinic System t·ªça l·∫°c t·∫°i 123 ƒê∆∞·ªùng S·ª©c Kh·ªèe, Q.1, TP.HCM. B·∫°n c·∫ßn ch·ªâ ƒë∆∞·ªùng kh√¥ng?';
    } else if (lowerMessage.includes('b√°c sƒ©')) {
      return 'Ch√∫ng t√¥i c√≥ ƒë·ªôi ng≈© b√°c sƒ© gi√†u kinh nghi·ªám ·ªü nhi·ªÅu chuy√™n khoa. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ b√°c sƒ© n√†o?';
    } else if (lowerMessage.includes('c·∫£m ∆°n') || lowerMessage.includes('thanks')) {
      return 'R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! N·∫øu c·∫ßn gi√∫p ƒë·ª° g√¨ th√™m, ƒë·ª´ng ng·∫°i li√™n h·ªá nh√©. üòä';
    } else {
      return 'T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn h·ªó tr·ª£. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ: ƒë·∫∑t l·ªãch kh√°m, gi·ªù l√†m vi·ªác, ƒë·ªãa ch·ªâ, ho·∫∑c th√¥ng tin b√°c sƒ©. T√¥i s·∫µn s√†ng gi√∫p ƒë·ª°!';
    }
  };

  // Quick reply buttons
  const quickReplies = [
    'ƒê·∫∑t l·ªãch kh√°m',
    'Gi·ªù l√†m vi·ªác',
    'ƒê·ªãa ch·ªâ ph√≤ng kh√°m',
    'Th√¥ng tin b√°c sƒ©'
  ];

  const handleQuickReply = (reply) => {
    setInputMessage(reply);
  };

  return (
    <div className="chatbot">
      {/* Chat Button */}
      <button
        className={`chatbot-button ${isOpen ? 'open' : ''}`}
        onClick={() => setIsOpen(!isOpen)}
        aria-label="Chat v·ªõi ch√∫ng t√¥i"
      >
        {isOpen ? <FaTimes /> : <FaComments />}
        {!isOpen && <span className="chatbot-badge">C·∫ßn h·ªó tr·ª£?</span>}
      </button>

      {/* Chat Modal */}
      {isOpen && (
        <div className="chatbot-modal">
          {/* Header */}
          <div className="chatbot-header">
            <div className="header-info">
              <FaRobot className="header-icon" />
              <div>
                <h3>Tr·ª£ l√Ω ·∫£o</h3>
                <span className="status">Tr·ª±c tuy·∫øn</span>
              </div>
            </div>
            <button 
              className="close-btn" 
              onClick={() => setIsOpen(false)}
              aria-label="ƒê√≥ng chat"
            >
              <FaTimes />
            </button>
          </div>

          {/* Messages */}
          <div className="chatbot-messages">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message ${message.sender}`}
              >
                <div className="message-avatar">
                  {message.sender === 'bot' ? <FaRobot /> : <FaUser />}
                </div>
                <div className="message-content">
                  <p>{message.text}</p>
                  <span className="message-time">{message.time}</span>
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="message bot">
                <div className="message-avatar">
                  <FaRobot />
                </div>
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Quick Replies */}
          {messages.length <= 2 && (
            <div className="quick-replies">
              {quickReplies.map((reply, index) => (
                <button
                  key={index}
                  className="quick-reply-btn"
                  onClick={() => handleQuickReply(reply)}
                >
                  {reply}
                </button>
              ))}
            </div>
          )}

          {/* Input Form */}
          <form className="chatbot-input" onSubmit={handleSendMessage}>
            <input
              type="text"
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
            />
            <button type="submit" aria-label="G·ª≠i tin nh·∫Øn">
              <FaPaperPlane />
            </button>
          </form>
        </div>
      )}
    </div>
  );
};

export default Chatbot;